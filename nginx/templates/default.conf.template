server {
  server_name api.yas.local;

  # Docker DNS
  resolver 127.0.0.11;

  location /media/ {
    proxy_pass http://media;
  }
  location /swagger-ui/ {
    proxy_pass http://swagger-ui:8080;
  }
  location /product/ {
    proxy_pass http://product;
  }
  location /customer/ {
    proxy_pass http://customer;
  }
  location /cart/ {
    proxy_pass http://cart;
  }
  location /rating/ {
    proxy_pass http://rating;
  }
  location /order/ {
    proxy_pass http://order;
  }
  location /location/ {
    proxy_pass http://location;
  }
  location /inventory/ {
    proxy_pass http://inventory;
  }
  location /tax/ {
    proxy_pass http://tax;
  }
  location /promotion/ {
    proxy_pass http://promotion;
  }
  location /search/ {
    #hack to prevent nginx to resolve container's host on start up
    set $docker_search_host "search";
    proxy_pass http://$docker_search_host;
  }
  location /payment/ {
    proxy_pass http://payment;
  }
  location /webhook/ {
    set $docker_webhook_host "webhook";
    proxy_pass http://$docker_webhook_host;
  }
  location /sampledata/ {
    proxy_pass http://sampledata;
  }
  location /recommendation/ {
    set $docker_recommendation_host "recommendation";
    proxy_pass http://$docker_recommendation_host;
  }
  location /delivery/ {
    proxy_pass http://host.docker.internal:8095; # temporary value for current development, will be replaced once the delivery service is dockerized
  }
}

server {
  server_name backoffice;
  location / {
    proxy_pass http://backoffice;
  }
}

server {
  server_name storefront;
  location / {
    proxy_pass http://storefront;
  }
}

server {
  server_name pgadmin.yas.local;
  location / {
    proxy_pass http://pgadmin;
  }
}

server {
  server_name identity;
  large_client_header_buffers 8 32k;
  location / {
    proxy_pass http://identity;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # Workaround to void CORS error from Reactjs
    if ($uri ~ "^(.*)/(protocol/openid-connect/auth|login/oauth2/code)(.*)") {
    	add_header Access-Control-Allow-Origin *;
    }
  }
}

server {
  server_name grafana;

  resolver 127.0.0.11;

  location / {
    set $docker_grafana_host "grafana";
    proxy_pass http://$docker_grafana_host:3000;
  }
}

server {
  server_name elasticsearch;

  resolver 127.0.0.11;

  location / {
    set $docker_elasticsearch_host "elasticsearch";
    proxy_pass http://$docker_elasticsearch_host:9200;
  }
}

server {
  server_name kafka;

  resolver 127.0.0.11;

  location / {
    proxy_pass http://kafka:9092;
  }
}